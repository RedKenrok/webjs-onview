{"version":3,"file":"onview.umd.min.js","sources":["../src/helpers/overrideProperties.ts","../src/helpers/executeCode.ts","../src/helpers/addAttributes.ts","../src/helpers/removeAttributes.ts","../src/index.ts"],"sourcesContent":["/**\n * Simplified object.assign function.\n * @param _a\n * @param _b\n */\nexport default function(_a, _b) {\n\tObject.keys(_b).forEach(function(key) {\n\t\t_a[key] = _b[key];\n\t});\n\treturn _a;\n}\n","/**\n * Executes code relatively safely.\n * @param _code\n * @param _contextName\n * @param _context\n */\nexport default function(_code:string, _context:object, _contextName:string = `context`) {\n\treturn Function(`\"use strict\"; return (function(` + _contextName + `) { ` + _code + ` });`)()(_context);\n}\n","/**\n * Add id, class, or other attribute using a query selector style query.\n * @param _element\n * @param _selectors\n * @param _splitCharacter\n */\nexport default function(_element:HTMLElement, _selectors:string, _splitCharacter:string = `,`) {\n\tlet key:string, value:string;\n\tArray.prototype.forEach.call(_selectors.split(_splitCharacter), selector => {\n\t\t// Trim spaces.\n\t\tselector = selector.trim();\n\n\t\t// Base what to do of\n\t\tswitch(selector[0]) {\n\t\t\tcase `#`:\n\t\t\t\t// Remove starting character and replace spaces with dashes.\n\t\t\t\tselector = selector.substring(1).replace(` `, `-`);\n\t\t\t\t// Set id.\n\t\t\t\t_element.id = selector;\n\t\t\t\tbreak;\n\t\t\tcase `.`:\n\t\t\t\t// Remove starting character and replace spaces with dashes.\n\t\t\t\tselector = selector.substring(1).replace(` `, `-`);\n\t\t\t\t// Add class if not part of classlist.\n\t\t\t\tif (!_element.classList.contains(selector)) {\n\t\t\t\t\t_element.classList.add(selector);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase `[`:\n\t\t\t\t// Remove brackets, split key and value, replace spaces with dashes in key.\n\t\t\t\tkey = selector.substring(1, selector.indexOf(`=`));\n\t\t\t\tvalue = selector.substring(\n\t\t\t\t\tkey.length + 2,\n\t\t\t\t\tselector.length - 1\n\t\t\t\t);\n\t\t\t\tkey = key.replace(` `, `-`);\n\n\t\t\t\t// Set attribute.\n\t\t\t\t_element.setAttribute(key, value);\n\t\t\t\tbreak;\n\t\t}\n\t});\n}\n","/**\n * Remove id, class, or other attribute using a query selector style query.\n * @param _element\n * @param _selectors\n * @param _splitCharacter\n */\nexport default function(_element:HTMLElement, _selectors:string, _splitCharacter:string = `,`) {\n\tlet index:number, key:string;\n\tArray.prototype.forEach.call(_selectors.split(_splitCharacter), selector => {\n\t\t// Trim spaces.\n\t\tselector = selector.trim();\n\n\t\t// Base what to do of\n\t\tswitch(selector[0]) {\n\t\t\tcase `#`:\n\t\t\t\t// Remove starting character and replace spaces with dashes.\n\t\t\t\tselector = selector.substring(1).replace(` `, `-`);\n\t\t\t\t// Remove id attribute.\n\t\t\t\t_element.removeAttribute(selector);\n\t\t\t\tbreak;\n\t\t\tcase `.`:\n\t\t\t\t// Remove starting character and replace spaces with dashes.\n\t\t\t\tselector = selector.substring(1).replace(` `, `-`);\n\t\t\t\t// Remove class if part of classlist.\n\t\t\t\tif (_element.classList.contains(selector)) {\n\t\t\t\t\t_element.classList.remove(selector);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase `[`:\n\t\t\t\t// Remove brackets, split key from value, replace spaces with dashes in key.\n\t\t\t\tindex = selector.indexOf(`=`);\n\t\t\t\tif (index < 0) {\n\t\t\t\t\tindex = selector.length - 1;\n\t\t\t\t}\n\t\t\t\tkey = selector.substring(1, index);\n\t\t\t\tkey = key.replace(` `, `-`);\n\n\t\t\t\t// Set attribute.\n\t\t\t\t_element.removeAttribute(key);\n\t\t\t\tbreak;\n\t\t}\n\t});\n}\n","// Module helpers.\nimport overrideProperties from './helpers/overrideProperties';\n// Intersection handler helpers.\nimport executeCode from './helpers/executeCode';\nimport addAttributes from './helpers/addAttributes';\nimport removeAttributes from './helpers/removeAttributes';\n\n/**\n * OnView class.\n */\nclass OnView {\n\t/**\n\t * Private static variables.\n\t */\n\tpublic static READY_STATES = {\n\t\tcomplete: `complete`,\n\t\tinteractive: `interactive`,\n\t\tnever: `never`,\n\t};\n\tprivate static ATTRIBUTES = [\n\t\t`data-onview`,\n\t\t`data-onview-enter`,\n\t\t`data-onview-enter-add`,\n\t\t`data-onview-enter-remove`,\n\t\t`data-onview-enter-toggle`,\n\t\t`data-onview-exit`,\n\t\t`data-onview-exit-add`,\n\t\t`data-onview-exit-remove`,\n\t\t`data-onview-exit-toggle`,\n\t];\n\n\t/**\n\t * Private variables.\n\t */\n\tprivate _initialized:boolean = false;\n\tprivate _options: {\n\t\tdebug?:boolean;\n\t\treadyState?:string;\n\n\t\tobservedElement?:Element;\n\t\tobserverElement?:Element;\n\t\tobserverMargin?:string;\n\n\t\teventContextName?:string;\n\t\tselectorSplitCharacter?: string;\n\t};\n\tprivate _observer:IntersectionObserver;\n\n\t/**\n\t * Construct OnView instance.\n\t * @param _options Module options. (See: README.md)\n\t */\n\tpublic constructor(_options:object) {\n\t\t// Set default options.\n\t\tthis._options = {\n\t\t\tdebug: false,\n\t\t\treadyState: OnView.READY_STATES.complete,\n\n\t\t\tobservedElement: document.body,\n\t\t\tobserverElement: null,\n\t\t\tobserverMargin: `0px`,\n\n\t\t\teventContextName: `detail`,\n\t\t\tselectorSplitCharacter: `?`,\n\t\t};\n\t\t// If custom options given then override the defaults.\n\t\tif (_options && _options !== {}) {\n\t\t\tthis._options = overrideProperties(this._options, _options);\n\n\t\t\t// Log changes to console.\n\t\t\tif (this._options.debug) {\n\t\t\t\tconsole.log(`OnView: overwriting options, new options:`, this._options);\n\t\t\t}\n\t\t}\n\n\t\t// Initialize module.\n\t\tif (this._options.readyState === OnView.READY_STATES.interactive) {\n\t\t\tif (document.readyState === `interactive` || document.readyState === `complete`) {\n\t\t\t\t// Initialize now.\n\t\t\t\tthis.initialize();\n\t\t\t} else {\n\t\t\t\t// Wait for DOM interactive, then initialize.\n\t\t\t\tdocument.addEventListener(`DOMContentLoaded`, () => {\n\t\t\t\t\tthis.initialize();\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (this._options.readyState === OnView.READY_STATES.complete) {\n\t\t\tif (document.readyState === `complete`) {\n\t\t\t\t// Initialize now.\n\t\t\t\tthis.initialize();\n\t\t\t} else {\n\t\t\t\t// Wait for window loaded, then initialize.\n\t\t\t\twindow.addEventListener(`load`, () => {\n\t\t\t\t\tthis.initialize();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns clone of current options.\n\t */\n\tpublic getOptions() {\n\t\treturn overrideProperties({}, this._options);\n\t}\n\t/**\n\t * Returns whether the instance has been initialized.\n\t */\n\tpublic isInitialized() {\n\t\treturn this._initialized;\n\t}\n\n\t/**\n\t * Initialize module instance.\n\t */\n\tpublic initialize() {\n\t\t// Check if already initialized.\n\t\tif (this._initialized) {\n\t\t\tif (this._options.debug) {\n\t\t\t\tconsole.warn(`OnView: module instance already initialized, therefore re-initialization is ignored.`);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\tthis._initialized = true;\n\n\t\t// Setup intersection observer.\n\t\tthis.setupObserver();\n\t\t// Query documents for elements to track.\n\t\tthis.queryDocument();\n\n\t\tif (this._options.debug) {\n\t\t\tconsole.log(`OnView: module instance initialized.`);\n\t\t}\n\t}\n\t/**\n\t * Destroy this instance.\n\t */\n\tpublic destroy() {\n\t\t// Disable and discard observer.\n\t\tif (this._observer) {\n\t\t\tthis._observer.disconnect();\n\t\t}\n\t\tthis._observer = null;\n\n\t\t// Set initialization to false.\n\t\tthis._initialized = false;\n\n\t\t// Reset options.\n\t\tthis._options = null;\n\t}\n\t/**\n\t * Query document for elements to track.\n\t */\n\tpublic queryDocument() {\n\t\t// Get currently observed elements.\n\t\tconst observedElements:Element[] = this._observer.takeRecords().map((entry:IntersectionObserverEntry) => {\n\t\t\treturn entry.target;\n\t\t});\n\t\t// Query document of elements to track.\n\t\tconst query:string[] = OnView.ATTRIBUTES.map((attribute) => {\n\t\t\treturn `[` + attribute + `]`;\n\t\t});\n\t\tconst elements:NodeListOf<Element> = this._options.observedElement.querySelectorAll(query.join(`,`));\n\n\t\t// If queried before.\n\t\tif (observedElements.length > 0) {\n\t\t\t// Compare previous list of elements to new elements.\n\t\t\tArray.prototype.forEach.call(elements, (element) => {\n\t\t\t\t// Filter elements out that are already being observer.\n\t\t\t\tif (observedElements.indexOf(element) >= 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Add element to observer.\n\t\t\t\tthis._observer.observe(element);\n\t\t\t});\n\t\t} else {\n\t\t\t// Add elements to observer.\n\t\t\tArray.prototype.forEach.call(elements, (element) => {\n\t\t\t\tthis._observer.observe(element);\n\t\t\t});\n\t\t}\n\n\t\tif (this._options.debug) {\n\t\t\tconsole.log(`OnView: queried document for elements, observered elements: `, elements);\n\t\t}\n\t}\n\n\t/**\n\t * Setup intersection observer.\n\t */\n\tprivate setupObserver() {\n\t\t// Ensure there is no previous observer active.\n\t\tif (this._observer) {\n\t\t\tthis._observer.disconnect();\n\t\t}\n\n\t\t// Define observer options.\n\t\tconst observerOptions = overrideProperties({\n\t\t\tthreshold: 0,\n\t\t}, {\n\t\t\troot: this._options.observerElement,\n\t\t\trootMargin: this._options.observerMargin,\n\t\t});\n\n\t\t// Create observer instance.\n\t\tthis._observer = new IntersectionObserver(this.handleIntersect, observerOptions);\n\t}\n\t/**\n\t * Handle intersection events.\n\t * @param _entries\n\t * @param _observer\n\t */\n\tprivate handleIntersect = (_entries: IntersectionObserverEntry[], _observer: IntersectionObserver) => {\n\t\tArray.prototype.forEach.call(_entries, (entry:IntersectionObserverEntry) => {\n\t\t\tif (this._options.debug) {\n\t\t\t\tconsole.log(`OnView: Intersection change triggered for: `, entry);\n\t\t\t}\n\n\t\t\t// Get time sensitive reused options.\n\t\t\tconst splitCharacter:string = this._options.selectorSplitCharacter;\n\n\t\t\t// Get HTML element from entry.\n\t\t\tconst element:HTMLElement = <HTMLElement> entry.target;\n\n\t\t\t// Get whether it has changed.\n\t\t\tconst hasChanged:boolean = (element.dataset.onviewIsintersecting === `true`) != entry.isIntersecting;\n\t\t\telement.dataset.onviewIsintersecting = entry.isIntersecting.toString();\n\n\t\t\t// Store function that need execution.\n\t\t\tconst functions:Function[] = [];\n\n\t\t\t// Execute code on view enter and exit.\n\t\t\tif (element.dataset.onview && element.dataset.onview.length > 0) {\n\t\t\t\tconst code:string = element.dataset.onview;\n\t\t\t\tfunctions.push(() => executeCode(code, {\n\t\t\t\t\tentry: entry,\n\t\t\t\t}, this._options.eventContextName));\n\t\t\t}\n\t\t\tif (entry.isIntersecting) {\n\t\t\t\t// Execute code on view enter.\n\t\t\t\tif (element.dataset.onviewEnter) {\n\t\t\t\t\tconst code: string = element.dataset.onviewEnter;\n\t\t\t\t\tfunctions.push(() => executeCode(code, {\n\t\t\t\t\t\tentry: entry,\n\t\t\t\t\t}, this._options.eventContextName));\n\n\t\t\t\t\tthis.removeFromObserving(element, _observer, `data-onview-enter`);\n\t\t\t\t}\n\t\t\t\t// Add attributes on view enter.\n\t\t\t\tif (element.dataset.onviewEnterAdd) {\n\t\t\t\t\tconst selectors: string = element.dataset.onviewEnterAdd;\n\t\t\t\t\tfunctions.push(() => addAttributes(element, selectors, splitCharacter));\n\n\t\t\t\t\tthis.removeFromObserving(element, _observer, `data-onview-enter-add`);\n\t\t\t\t}\n\t\t\t\t// Remove attributes on view enter.\n\t\t\t\tif (element.dataset.onviewEnterRemove) {\n\t\t\t\t\tconst selectors: string = element.dataset.onviewEnterRemove;\n\t\t\t\t\tfunctions.push(() => removeAttributes(element, selectors, splitCharacter));\n\n\t\t\t\t\tthis.removeFromObserving(element, _observer, `data-onview-enter-remove`);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add attributes when in view and remove attributes when out of view.\n\t\t\tif (element.dataset.onviewEnterToggle) {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tconst selectors:string = element.dataset.onviewEnterToggle;\n\t\t\t\t\tfunctions.push(() => addAttributes(element, selectors, splitCharacter));\n\t\t\t\t} else if (hasChanged) {\n\t\t\t\t\tconst selectors:string = element.dataset.onviewEnterToggle;\n\t\t\t\t\tfunctions.push(() => removeAttributes(element, selectors, splitCharacter));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasChanged && !entry.isIntersecting) {\n\t\t\t\t// Execute code on view exit.\n\t\t\t\tif (element.dataset.onviewExit) {\n\t\t\t\t\tconst code:string = element.dataset.onviewExit;\n\t\t\t\t\tfunctions.push(() => executeCode(code, {\n\t\t\t\t\t\tentry: entry,\n\t\t\t\t\t}, this._options.eventContextName));\n\n\t\t\t\t\tthis.removeFromObserving(element, _observer, `data-onview-exit`);\n\t\t\t\t}\n\t\t\t\t// Add attributes on view exit.\n\t\t\t\tif (element.dataset.onviewExitAdd) {\n\t\t\t\t\tconst selectors:string = element.dataset.onviewExitAdd;\n\t\t\t\t\tfunctions.push(() => addAttributes(element, selectors, splitCharacter));\n\n\t\t\t\t\tthis.removeFromObserving(element, _observer, `data-onview-exit-add`);\n\t\t\t\t}\n\t\t\t\t// Remove attributes on view exit.\n\t\t\t\tif (element.dataset.onviewExitRemove) {\n\t\t\t\t\tconst selectors:string = element.dataset.onviewExitRemove;\n\t\t\t\t\tfunctions.push(() => removeAttributes(element, selectors, splitCharacter));\n\n\t\t\t\t\tthis.removeFromObserving(element, _observer, `data-onview-exit-remove`);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Remove attributes when in view and add attributes when out of view.\n\t\t\tif (element.dataset.onviewExitToggle) {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tconst selectors:string = element.dataset.onviewExitToggle;\n\t\t\t\t\tfunctions.push(() => removeAttributes(element, selectors, splitCharacter));\n\t\t\t\t} else if (hasChanged) {\n\t\t\t\t\tconst selectors:string = element.dataset.onviewExitToggle;\n\t\t\t\t\tfunctions.push(() => addAttributes(element, selectors, splitCharacter));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Execute functions with optional delay.\n\t\t\tthis.delayExecutions(functions, element.dataset.onviewDelay);\n\n\t\t\tif (typeof(window.CustomEvent) === `function`) {\n\t\t\t\t// Dispatch custom event.\n\t\t\t\telement.dispatchEvent(new CustomEvent(`onview-change`, {\n\t\t\t\t\tdetail: {\n\t\t\t\t\t\tentry: entry,\n\t\t\t\t\t},\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t};\n\t/**\n\t * Delay invocation of the method by the amount of delay.\n\t * @param _functions Functions to invoke after the delay has passed.\n\t * @param _delayText Interger parsable string with time in milliseconds.\n\t */\n\tprivate delayExecutions(_functions:Function[], _delayText:string) {\n\t\tif (_functions.length <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!_delayText) {\n\t\t\t_functions.forEach(_function => {\n\t\t\t\t_function();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst delay:number = parseInt(_delayText, 10);\n\t\tif (delay <= 0) {\n\t\t\t_functions.forEach(_function => {\n\t\t\t\t_function();\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\t_functions.forEach(_function => {\n\t\t\t\t_function();\n\t\t\t});\n\t\t}, delay);\n\t}\n\t/**\n\t * Removes attribute from element and disable observing if no OnView attributes are left.\n\t * @param _element\n\t * @param _observer\n\t * @param _attributeName\n\t */\n\tprivate removeFromObserving(_element: HTMLElement, _observer: IntersectionObserver, _attributeName: string) {\n\t\t// If repeat is set then do not remove.\n\t\tif (_element.dataset.onviewRepeat) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove attribute that got invoked.\n\t\t_element.removeAttribute(_attributeName);\n\n\t\t// Check for other OnView observable attributes, if any left then exit early.\n\t\tif (OnView.ATTRIBUTES.filter((attribute) => _element.hasAttribute(attribute)).length > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove automatically added element.\n\t\t_element.removeAttribute(`data-onview-isintersecting`);\n\t\t// Remove element from being observed.\n\t\t_observer.unobserve(_element);\n\t}\n}\n\n// Export module class.\nexport default OnView;\n"],"names":["_a","_b","Object","keys","forEach","key","_code","_context","Function","_element","_selectors","value","_splitCharacter","Array","prototype","call","split","selector","trim","substring","replace","id","classList","contains","add","indexOf","length","setAttribute","index","removeAttribute","remove","OnView","_options","_entries","_observer","entry","_this","debug","console","log","splitCharacter","selectorSplitCharacter","element","target","hasChanged","dataset","onviewIsintersecting","isIntersecting","toString","functions","onview","code","push","executeCode","eventContextName","onviewEnter","removeFromObserving","onviewEnterAdd","selectors","addAttributes","onviewEnterRemove","removeAttributes","onviewEnterToggle","onviewExit","onviewExitAdd","onviewExitRemove","onviewExitToggle","delayExecutions","onviewDelay","window","CustomEvent","dispatchEvent","detail","readyState","READY_STATES","complete","observedElement","document","body","observerElement","observerMargin","overrideProperties","this","interactive","initialize","addEventListener","_initialized","warn","setupObserver","queryDocument","disconnect","observedElements","takeRecords","map","query","ATTRIBUTES","attribute","elements","querySelectorAll","join","_this2","observe","observerOptions","threshold","root","rootMargin","IntersectionObserver","handleIntersect","_functions","_delayText","delay","parseInt","_function","setTimeout","_attributeName","onviewRepeat","filter","hasAttribute","unobserve","never"],"mappings":"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"}